asi tenia yo todo antes:
tengo esta estructura en mi react:
src/
├── componentes/
│   ├── autenticacion.jsx
│   ├── autenticacion.css
│   ├── inicio-auth.jsx
│   ├── inicio-auth.css
│   ├── menu.jsx
│   ├── menu.css
│   └── firebase-config.jsx
└── App.js

los archivos son los siguientes:
autenticacion.jsx:
import React, { useState } from 'react';
import { getAuth, createUserWithEmailAndPassword, sendEmailVerification } from "firebase/auth";
import { useFirebaseApp } from 'reactfire';
import './autenticacion.css';

export default function Auth()  {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState(false);
    const [verificationSent, setVerificationSent] = useState(false);

    const firebase = useFirebaseApp();
    const auth = getAuth(firebase);

    const isValidEmail = (email) => {
        // Validación mejorada de dominios comunes
        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!regex.test(email)) return false;
        
        const domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'icloud.com'];
        const domain = email.split('@')[1];
        return domains.some(valid => domain.includes(valid));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        if (!isValidEmail(email)) {
            setError('Ingresa un correo electrónico válido (Gmail, Yahoo, Outlook, etc.)');
            return;
        }

        if (password.length < 6) {
            setError('La contraseña debe tener al menos 6 caracteres');
            return;
        }

        if (password !== confirmPassword) {
            setError('Las contraseñas no coinciden');
            return;
        }

        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            
            // Enviar correo de verificación
            await sendEmailVerification(userCredential.user);
            
            setSuccess(true);
            setVerificationSent(true);
            setEmail('');
            setPassword('');
            setConfirmPassword('');
            
            setTimeout(() => {
                setSuccess(false);
                setVerificationSent(false);
            }, 5000);
            
        } catch (error) {
            console.error("Error de Firebase:", error.code);
            switch (error.code) {
                case 'auth/email-already-in-use':
                    setError('El correo ya está registrado');
                    break;
                case 'auth/invalid-email':
                    setError('El formato del correo es inválido');
                    break;
                case 'auth/operation-not-allowed':
                    setError('El registro con email/contraseña no está habilitado');
                    break;
                default:
                    setError('Error al crear usuario: ' + error.message);
            }
        }
    };

    return (
        <div className="neon-auth-container">
            <div className="neon-card">
                <h2 className="neon-title">REGISTRO<span className="neon-flicker">_</span></h2>
                
                {error && <div className="neon-error">{error}</div>}
                
                {success && verificationSent && (
                    <div className="neon-success">
                        ¡Registro exitoso! Verifica tu correo electrónico para activar tu cuenta.
                        <div className="neon-pulse">Revisa tu bandeja de entrada o spam</div>
                    </div>
                )}

                <form onSubmit={handleSubmit}>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            placeholder="CORREO ELECTRÓNICO"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <div className="neon-input-group">
                        <input
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="CONTRASEÑA (MÍN. 6 CARACTERES)"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <div className="neon-input-group">
                        <input
                            type="password"
                            value={confirmPassword}
                            onChange={(e) => setConfirmPassword(e.target.value)}
                            placeholder="CONFIRMAR CONTRASEÑA"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <button type="submit" className="neon-button">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        CREAR USUARIO
                    </button>
                </form>
            </div>
        </div>
    );
};

autenticacion.css:
/* autenticacion.css - Versión Mejorada */
.neon-auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: #0a0a1a;
    background-image: 
        radial-gradient(circle at 10% 20%, rgba(0, 80, 255, 0.15) 0%, transparent 25%),
        radial-gradient(circle at 90% 80%, rgba(0, 200, 255, 0.15) 0%, transparent 25%),
        linear-gradient(to bottom, rgba(0,0,0,0.9), rgba(5,0,30,0.95));
    font-family: 'Rajdhani', 'Segoe UI', sans-serif;
    overflow: hidden;
    position: relative;
}

/* Partículas animadas de fondo */
.neon-auth-container::before {
    content: '';
    position: absolute;
    width: 300%;
    height: 300%;
    background: 
        radial-gradient(circle, rgba(0,150,255,0.1) 0%, transparent 70%) 0 0,
        radial-gradient(circle, rgba(0,255,200,0.1) 0%, transparent 70%) 50% 50%;
    background-size: 50% 50%;
    animation: particleMove 20s infinite linear;
    z-index: 0;
}

@keyframes particleMove {
    100% {
        transform: translate(-50%, -50%);
    }
}

.neon-card {
    position: relative;
    width: 420px;
    padding: 50px 40px;
    background: rgba(5, 5, 30, 0.7);
    border-radius: 20px;
    box-shadow: 
        0 0 25px rgba(0, 150, 255, 0.5),
        0 0 50px rgba(0, 100, 255, 0.3),
        inset 0 0 15px rgba(0, 200, 255, 0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(0, 200, 255, 0.3);
    z-index: 1;
    overflow: hidden;
    transform-style: preserve-3d;
    animation: cardFloat 6s ease-in-out infinite alternate;
}

@keyframes cardFloat {
    0% { transform: translateY(0) rotateX(0.5deg) rotateY(0.5deg); }
    100% { transform: translateY(-20px) rotateX(-0.5deg) rotateY(0.5deg); }
}

.neon-card::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
        to bottom right,
        transparent,
        transparent,
        rgba(0, 150, 255, 0.1),
        transparent,
        transparent
    );
    transform: rotate(45deg);
    animation: neonGlow 8s linear infinite;
    z-index: -1;
}

.neon-title {
    color: #00f2ff;
    text-align: center;
    margin-bottom: 40px;
    font-size: 2.5rem;
    font-weight: 600;
    letter-spacing: 4px;
    text-shadow: 
        0 0 10px #00c3ff,
        0 0 20px #00c3ff,
        0 0 40px rgba(0, 195, 255, 0.7);
    position: relative;
    animation: textFloat 3s ease-in-out infinite alternate, textPulse 2s infinite alternate;
}

@keyframes textPulse {
    0%, 100% { text-shadow: 0 0 10px #00c3ff, 0 0 20px #00c3ff, 0 0 40px rgba(0, 195, 255, 0.7); }
    50% { text-shadow: 0 0 15px #00c3ff, 0 0 30px #00c3ff, 0 0 60px rgba(0, 195, 255, 0.9); }
}

.neon-input-group {
    position: relative;
    margin-bottom: 40px;
    perspective: 500px;
}

.neon-input {
    width: 100%;
    padding: 18px 0;
    font-size: 18px;
    color: #00e1ff;
    background: transparent;
    border: none;
    border-bottom: 2px solid rgba(0, 195, 255, 0.5);
    outline: none;
    letter-spacing: 2px;
    transition: all 0.4s;
    transform-origin: left;
}

.neon-input:focus {
    border-bottom-color: #00f2ff;
    box-shadow: 0 2px 0 0 rgba(0, 242, 255, 0.4);
    transform: scaleX(1.02);
}

.neon-input-border {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, #00f2ff, #0084ff, #00f2ff);
    background-size: 200% 100%;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    z-index: 1;
    animation: borderGradient 3s linear infinite;
}

@keyframes borderGradient {
    0% { background-position: 0% 50%; }
    100% { background-position: 200% 50%; }
}

.neon-input:focus ~ .neon-input-border {
    transform: scaleX(1);
}

.neon-button {
    position: relative;
    width: 100%;
    padding: 18px;
    background: rgba(0, 150, 255, 0.1);
    border: none;
    color: #00f2ff;
    font-size: 18px;
    letter-spacing: 3px;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.4s;
    margin-top: 30px;
    border-radius: 8px;
    box-shadow: 
        0 0 15px rgba(0, 195, 255, 0.4),
        inset 0 0 10px rgba(0, 195, 255, 0.2);
    z-index: 1;
    font-weight: 600;
    text-transform: uppercase;
}

.neon-button:hover {
    background: rgba(0, 195, 255, 0.2);
    box-shadow: 
        0 0 25px rgba(0, 195, 255, 0.6),
        inset 0 0 15px rgba(0, 195, 255, 0.3);
    transform: translateY(-3px);
}

.neon-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(0, 242, 255, 0.2), transparent);
    transition: 0.5s;
    z-index: -1;
}

.neon-button:hover::before {
    left: 100%;
}

.neon-error, .neon-success {
    padding: 18px;
    margin: 25px 0;
    border-radius: 8px;
    text-align: center;
    letter-spacing: 1px;
    font-size: 16px;
    transition: all 0.5s;
    transform-origin: top;
    animation: fadeIn 0.5s ease-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
}

.neon-error {
    color: #ff2d75;
    background: rgba(255, 45, 117, 0.15);
    border: 1px solid rgba(255, 45, 117, 0.4);
    text-shadow: 0 0 10px rgba(255, 45, 117, 0.7);
    animation: pulseError 1.5s infinite, shake 0.5s;
}

@keyframes shake {
    0%, 100% { transform: translateX(0); }
    20%, 60% { transform: translateX(-5px); }
    40%, 80% { transform: translateX(5px); }
}

.neon-success {
    color: #00ffaa;
    background: rgba(0, 255, 170, 0.15);
    border: 1px solid rgba(0, 255, 170, 0.4);
    text-shadow: 0 0 10px rgba(0, 255, 170, 0.7);
    animation: pulseSuccess 1.5s infinite, floatUp 0.5s;
}

@keyframes floatUp {
    from { transform: translateY(20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

/* Efectos adicionales para el contenedor */
.neon-card::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        radial-gradient(circle at 20% 30%, rgba(0, 200, 255, 0.05) 0%, transparent 30%),
        radial-gradient(circle at 80% 70%, rgba(0, 150, 255, 0.05) 0%, transparent 30%);
    pointer-events: none;
    z-index: -1;
}

firebase-config.jsx:
export default{
    apiKey: "AIzaSyCw1M6KyCSC5bdoh013zlUet-0WQYqmIBY",
    authDomain: "pokemon-firebase-3f4b7.firebaseapp.com",
    projectId: "pokemon-firebase-3f4b7",
    storageBucket: "pokemon-firebase-3f4b7.firebasestorage.app",
    messagingSenderId: "17495235476",
    appId: "1:17495235476:web:be9cd668fa781f15d7cd81",
    measurementId: "G-8BMB3NYP5B"
}

inicio-auth.jsx:
import React, { useState } from 'react';
import { getAuth, signInWithEmailAndPassword, sendPasswordResetEmail } from "firebase/auth";
import { useFirebaseApp } from 'reactfire';
import './inicio-auth.css';

export default function InicioAuth() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState(false);
    const [resetSent, setResetSent] = useState(false);
    const [resetEmail, setResetEmail] = useState('');

    const firebase = useFirebaseApp();
    const auth = getAuth(firebase);

    const handleLogin = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess(false);

        try {
            await signInWithEmailAndPassword(auth, email, password);
            setSuccess(true);
            setTimeout(() => {
                setEmail('');
                setPassword('');
                setSuccess(false);
            }, 3000);
        } catch (error) {
            handleLoginError(error);
        }
    };

    const handleLoginError = (error) => {
        console.error("Error de Firebase:", error.code);
        let errorMessage = 'Error al iniciar sesión';
        
        switch (error.code) {
            case 'auth/user-not-found':
                errorMessage = 'Usuario no encontrado';
                break;
            case 'auth/wrong-password':
                errorMessage = 'Correo o contraseña incorrectos';
                break;
            case 'auth/user-disabled':
                errorMessage = 'Tu cuenta ha sido desactivada';
                break;
            case 'auth/too-many-requests':
                errorMessage = 'Demasiados intentos. Intenta más tarde o restablece tu contraseña';
                break;
            case 'auth/invalid-email':
                errorMessage = 'El formato del correo es inválido';
                break;
            default:
                errorMessage = 'Error al iniciar sesión: ' + error.message;
        }
        
        setError(errorMessage);
    };

    const handleResetPassword = async () => {
        if (!resetEmail) {
            setError('Ingresa tu correo electrónico para restablecer la contraseña');
            return;
        }

        try {
            await sendPasswordResetEmail(auth, resetEmail);
            setResetSent(true);
            setError('');
            setTimeout(() => {
                setResetSent(false);
                setResetEmail('');
            }, 5000);
        } catch (error) {
            console.error("Error al enviar correo de restablecimiento:", error);
            setError('Error al enviar el correo: ' + error.message);
            setResetSent(false);
        }
    };

    return (
        <div className="neon-auth-container">
            <div className="neon-card">
                <h2 className="neon-title">INICIAR SESIÓN<span className="neon-flicker">_</span></h2>
                
                {error && <div className="neon-error">{error}</div>}
                
                {success && (
                    <div className="neon-success">
                        ¡Inicio de sesión exitoso! Redirigiendo...
                    </div>
                )}
                
                {resetSent && (
                    <div className="neon-success">
                        ¡Correo de restablecimiento enviado a {resetEmail}! 
                        Revisa tu bandeja de entrada y spam.
                    </div>
                )}

                <form onSubmit={handleLogin}>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            placeholder="CORREO ELECTRÓNICO"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <div className="neon-input-group">
                        <input
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="CONTRASEÑA"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <button type="submit" className="neon-button">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        INGRESAR
                    </button>
                </form>

                <div className="neon-reset-container">
                    <h3 className="neon-reset-title">¿Olvidaste tu contraseña?</h3>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={resetEmail}
                            onChange={(e) => setResetEmail(e.target.value)}
                            placeholder="INGRESA TU CORREO"
                            className="neon-input"
                        />
                        <span className="neon-input-border"></span>
                    </div>
                    <button 
                        type="button" 
                        className="neon-reset-button"
                        onClick={handleResetPassword}
                    >
                        ENVIAR CORREO DE RESTABLECIMIENTO
                    </button>
                </div>
            </div>
        </div>
    );
}

inicio-auth.css:
/* inicio-auth.css - Versión Mejorada */
.neon-reset-container {
    margin-top: 40px;
    padding-top: 30px;
    border-top: 2px solid rgba(0, 195, 255, 0.2);
    animation: fadeInReset 0.8s both;
    position: relative;
}

@keyframes fadeInReset {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.neon-reset-title {
    color: rgba(0, 242, 255, 0.8);
    font-size: 18px;
    margin-bottom: 20px;
    text-align: center;
    letter-spacing: 2px;
    text-shadow: 0 0 10px rgba(0, 195, 255, 0.3);
    animation: textFlicker 3s infinite alternate;
}

@keyframes textFlicker {
    0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
        opacity: 0.8;
        text-shadow: 0 0 10px rgba(0, 195, 255, 0.5);
    }
    20%, 24%, 55% {
        opacity: 0.4;
        text-shadow: none;
    }
}

.neon-reset-button {
    width: 100%;
    padding: 16px;
    background: rgba(0, 150, 255, 0.1);
    border: 1px solid rgba(0, 195, 255, 0.3);
    color: #00f2ff;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.4s;
    margin-top: 20px;
    border-radius: 8px;
    letter-spacing: 2px;
    text-transform: uppercase;
    position: relative;
    overflow: hidden;
    z-index: 1;
    box-shadow: 
        0 0 15px rgba(0, 195, 255, 0.3),
        inset 0 0 10px rgba(0, 195, 255, 0.2);
}

.neon-reset-button:hover {
    background: rgba(0, 195, 255, 0.2);
    box-shadow: 
        0 0 25px rgba(0, 195, 255, 0.5),
        inset 0 0 15px rgba(0, 195, 255, 0.3);
    transform: translateY(-3px);
    color: #00ffcc;
}

.neon-reset-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(0, 242, 255, 0.2), transparent);
    transition: 0.5s;
    z-index: -1;
}

.neon-reset-button:hover::before {
    left: 100%;
}

/* Efecto de onda al hacer clic */
.neon-reset-button:active {
    animation: buttonClick 0.4s;
}

@keyframes buttonClick {
    0% { transform: scale(1); }
    50% { transform: scale(0.95); }
    100% { transform: scale(1); }
}

/* Efecto especial para el contenedor de reset */
.neon-reset-container::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
        radial-gradient(circle at center, rgba(0, 200, 255, 0.05) 0%, transparent 70%);
    pointer-events: none;
    z-index: -1;
    animation: pulseReset 6s infinite;
}

@keyframes pulseReset {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 0.8; }
}

menu.jsx:
import React, { useState } from 'react';
import Auth from './autenticacion';
import InicioAuth from './inicio-auth';
import './menu.css';

export default function Menu() {
  const [showLogin, setShowLogin] = useState(true);

  return (
    <div className="auth-menu-container">
      <div className="auth-menu-tabs">
        <button 
          className={`auth-tab ${showLogin ? 'active' : ''}`}
          onClick={() => setShowLogin(true)}
        >
          INICIAR SESIÓN
        </button>
        <button 
          className={`auth-tab ${!showLogin ? 'active' : ''}`}
          onClick={() => setShowLogin(false)}
        >
          REGISTRARSE
        </button>
      </div>
      
      <div className="auth-menu-content">
        {showLogin ? <InicioAuth /> : <Auth />}
      </div>
    </div>
  );
}

menu.css:
/* menu.css - Versión Mejorada */
.auth-menu-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 500px;
    margin: 0 auto;
    padding: 30px;
    background: rgba(10, 10, 30, 0.7);
    border-radius: 20px;
    box-shadow: 
        0 0 30px rgba(0, 150, 255, 0.4),
        inset 0 0 20px rgba(0, 200, 255, 0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(0, 200, 255, 0.3);
    animation: menuAppear 0.8s cubic-bezier(0.68, -0.55, 0.27, 1.55);
}

@keyframes menuAppear {
    from { 
        opacity: 0;
        transform: scale(0.8) translateY(50px);
    }
    to { 
        opacity: 1;
        transform: scale(1) translateY(0);
    }
}

.auth-menu-tabs {
    display: flex;
    width: 100%;
    margin-bottom: 40px;
    border-bottom: 2px solid rgba(0, 195, 255, 0.3);
    position: relative;
}

.auth-tab {
    flex: 1;
    padding: 18px;
    background: transparent;
    border: none;
    color: rgba(0, 195, 255, 0.7);
    font-size: 18px;
    letter-spacing: 2px;
    cursor: pointer;
    position: relative;
    transition: all 0.4s;
    font-weight: 600;
    text-transform: uppercase;
    text-shadow: 0 0 5px rgba(0, 195, 255, 0.3);
}

.auth-tab.active {
    color: #00f2ff;
    text-shadow: 
        0 0 10px #00c3ff,
        0 0 20px rgba(0, 195, 255, 0.5);
}

.auth-tab.active::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, #00f2ff, #0084ff);
    animation: tabUnderline 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55) both;
    border-radius: 2px 2px 0 0;
}

@keyframes tabUnderline {
    from { transform: scaleX(0); opacity: 0; }
    to { transform: scaleX(1); opacity: 1; }
}

.auth-menu-content {
    width: 100%;
    animation: contentFade 0.6s both;
}

@keyframes contentFade {
    from { 
        opacity: 0;
        transform: translateY(20px);
    }
    to { 
        opacity: 1;
        transform: translateY(0);
    }
}

/* Efecto de hover para las pestañas */
.auth-tab:hover {
    color: #00c3ff;
    text-shadow: 0 0 10px rgba(0, 195, 255, 0.5);
}

/* Efecto de reflejo */
.auth-menu-container::before {
    content: '';
    position: absolute;
    top: -10%;
    left: -10%;
    width: 120%;
    height: 120%;
    background: 
        radial-gradient(circle at 70% 30%, rgba(0, 200, 255, 0.05) 0%, transparent 30%),
        radial-gradient(circle at 30% 70%, rgba(0, 150, 255, 0.05) 0%, transparent 30%);
    pointer-events: none;
    z-index: -1;
    animation: bgMove 15s infinite linear;
}

@keyframes bgMove {
    100% {
        transform: rotate(1deg);
    }
}

App.js:
import React from 'react';
import './App.css';
import Menu from './componentes/menu';

function App() {
  return (
    <div className="App">
      {/* Efectos de pantalla completa */}
      <div className="screen-border"></div>
      
      {/* Esquinas decorativas */}
      <div className="corner corner-tl"></div>
      <div className="corner corner-tr"></div>
      <div className="corner corner-bl"></div>
      <div className="corner corner-br"></div>
      
      {/* Cables decorativos */}
      <div className="cable cable-vertical"></div>
      <div className="cable cable-horizontal"></div>
      
      {/* Componente Menu */}
      <Menu />
    </div>
  );
}

export default App;
App.css:
/* App.css - Versión Completa con Efectos Globales */

/* Reset básico para eliminar márgenes y bordes blancos */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Estilos globales para el cuerpo de la aplicación */
body {
    min-height: 100vh;
    background: 
        radial-gradient(circle at 20% 30%, rgba(0, 80, 255, 0.15) 0%, transparent 25%),
        radial-gradient(circle at 80% 70%, rgba(0, 200, 255, 0.15) 0%, transparent 25%),
        linear-gradient(to bottom, #0a0a1a, #050520);
    font-family: 'Rajdhani', sans-serif;
    overflow-x: hidden;
    position: relative;
}

/* Efecto de partículas global */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
        radial-gradient(circle at 20% 30%, rgba(0, 150, 255, 0.05) 0%, transparent 15%) 0 0,
        radial-gradient(circle at 80% 70%, rgba(0, 255, 200, 0.05) 0%, transparent 15%) 100% 100%;
    background-size: 50% 50%;
    animation: particleMove 40s infinite linear;
    z-index: -2;
    pointer-events: none;
}

@keyframes particleMove {
    100% { transform: translate(-50%, -50%); }
}

/* Efecto de escaneo (como matrix) */
body::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        to bottom,
        transparent 95%,
        rgba(0, 200, 255, 0.02) 95%,
        transparent 96%,
        rgba(0, 150, 255, 0.03) 96%,
        transparent 97%,
        rgba(0, 100, 255, 0.01) 97%,
        transparent 100%
    );
    background-size: 100% 10px;
    animation: scanline 8s linear infinite;
    z-index: -1;
    pointer-events: none;
}

@keyframes scanline {
    0% { background-position: 0 -50px; }
    100% { background-position: 0 0; }
}

/* Contenedor principal */
.App {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    padding: 20px;
    position: relative;
    z-index: 1;
}

/* Efecto de borde de pantalla */
.screen-border {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-shadow: 
        inset 0 0 30px rgba(0, 150, 255, 0.2),
        inset 0 0 60px rgba(0, 100, 255, 0.1),
        inset 0 0 90px rgba(0, 80, 255, 0.05);
    pointer-events: none;
    z-index: 0;
}

/* Esquinas decorativas */
.corner {
    position: fixed;
    width: 50px;
    height: 50px;
    border-color: #00f2ff;
    border-style: solid;
    border-width: 0;
    pointer-events: none;
    z-index: 2;
}

.corner-tl {
    top: 20px;
    left: 20px;
    border-top-width: 3px;
    border-left-width: 3px;
    border-top-left-radius: 10px;
    box-shadow: -5px -5px 15px rgba(0, 242, 255, 0.5);
    animation: cornerPulse 4s infinite;
}

.corner-tr {
    top: 20px;
    right: 20px;
    border-top-width: 3px;
    border-right-width: 3px;
    border-top-right-radius: 10px;
    box-shadow: 5px -5px 15px rgba(0, 242, 255, 0.5);
    animation: cornerPulse 4s infinite 1s;
}

.corner-bl {
    bottom: 20px;
    left: 20px;
    border-bottom-width: 3px;
    border-left-width: 3px;
    border-bottom-left-radius: 10px;
    box-shadow: -5px 5px 15px rgba(0, 242, 255, 0.5);
    animation: cornerPulse 4s infinite 2s;
}

.corner-br {
    bottom: 20px;
    right: 20px;
    border-bottom-width: 3px;
    border-right-width: 3px;
    border-bottom-right-radius: 10px;
    box-shadow: 5px 5px 15px rgba(0, 242, 255, 0.5);
    animation: cornerPulse 4s infinite 3s;
}

@keyframes cornerPulse {
    0%, 100% { opacity: 0.7; }
    50% { opacity: 1; }
}

/* Efectos de "cables" decorativos */
.cable {
    position: fixed;
    background: rgba(0, 200, 255, 0.1);
    z-index: 1;
}

.cable-vertical {
    width: 4px;
    height: 100px;
    right: 50px;
    top: -50px;
    animation: cableFloat 6s infinite ease-in-out;
    box-shadow: 
        0 0 10px rgba(0, 200, 255, 0.5),
        inset 0 0 5px rgba(0, 150, 255, 0.8);
}

.cable-horizontal {
    width: 100px;
    height: 4px;
    left: -50px;
    bottom: 80px;
    animation: cableFloat 8s infinite ease-in-out reverse;
    box-shadow: 
        0 0 10px rgba(0, 200, 255, 0.5),
        inset 0 0 5px rgba(0, 150, 255, 0.8);
}

@keyframes cableFloat {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(20px); }
}


espera, despues estas fueron sus modificaciones:
inicio-auth.js:
import React, { useState } from 'react';
import { getAuth, signInWithEmailAndPassword, sendPasswordResetEmail, GoogleAuthProvider, signInWithPopup } from "firebase/auth";
import { useFirebaseApp } from 'reactfire';
import './inicio-auth.css';

export default function InicioAuth() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState(false);
    const [resetSent, setResetSent] = useState(false);
    const [resetEmail, setResetEmail] = useState('');

    const firebase = useFirebaseApp();
    const auth = getAuth(firebase);

    const handleLogin = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess(false);

        try {
            await signInWithEmailAndPassword(auth, email, password);
            setSuccess(true);
            setTimeout(() => {
                setEmail('');
                setPassword('');
                setSuccess(false);
            }, 3000);
        } catch (error) {
            handleLoginError(error);
        }
    };

    const handleLoginWithGoogle = async () => {
        try {
            const provider = new GoogleAuthProvider();
            await signInWithPopup(auth, provider);
            setSuccess(true);
            setTimeout(() => setSuccess(false), 3000);
        } catch (error) {
            setError('Error al iniciar con Google: ' + error.message);
        }
    };

    const handleLoginError = (error) => {
        console.error("Error de Firebase:", error.code);
        let errorMessage = 'Error al iniciar sesión';
        
        switch (error.code) {
            case 'auth/user-not-found':
                errorMessage = 'Usuario no encontrado';
                break;
            case 'auth/wrong-password':
                errorMessage = 'Correo o contraseña incorrectos';
                break;
            case 'auth/user-disabled':
                errorMessage = 'Tu cuenta ha sido desactivada';
                break;
            case 'auth/too-many-requests':
                errorMessage = 'Demasiados intentos. Intenta más tarde o restablece tu contraseña';
                break;
            case 'auth/invalid-email':
                errorMessage = 'El formato del correo es inválido';
                break;
            default:
                errorMessage = 'Error al iniciar sesión: ' + error.message;
        }
        
        setError(errorMessage);
    };

    const handleResetPassword = async () => {
        if (!resetEmail) {
            setError('Ingresa tu correo electrónico para restablecer la contraseña');
            return;
        }

        try {
            await sendPasswordResetEmail(auth, resetEmail);
            setResetSent(true);
            setError('');
            setTimeout(() => {
                setResetSent(false);
                setResetEmail('');
            }, 5000);
        } catch (error) {
            console.error("Error al enviar correo de restablecimiento:", error);
            setError('Error al enviar el correo: ' + error.message);
            setResetSent(false);
        }
    };

    return (
        <div className="neon-auth-container">
            <div className="neon-card">
                <h2 className="neon-title">INICIAR SESIÓN<span className="neon-flicker">_</span></h2>
                
                {error && <div className="neon-error">{error}</div>}
                
                {success && (
                    <div className="neon-success">
                        ¡Inicio de sesión exitoso! Redirigiendo...
                    </div>
                )}
                
                {resetSent && (
                    <div className="neon-success">
                        ¡Correo de restablecimiento enviado a {resetEmail}! 
                        Revisa tu bandeja de entrada y spam.
                    </div>
                )}

                <form onSubmit={handleLogin}>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            placeholder="CORREO ELECTRÓNICO"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <div className="neon-input-group">
                        <input
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="CONTRASEÑA"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <button type="submit" className="neon-button">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        INGRESAR
                    </button>
                </form>

                <div className="neon-divider">
                    <span className="neon-divider-line"></span>
                    <span className="neon-divider-text">O</span>
                    <span className="neon-divider-line"></span>
                </div>

                <button 
                    onClick={handleLoginWithGoogle} 
                    className="neon-button neon-google-button"
                >
                    <span className="neon-google-icon">G</span>
                    Continuar con Google
                </button>

                <div className="neon-reset-container">
                    <h3 className="neon-reset-title">¿Olvidaste tu contraseña?</h3>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={resetEmail}
                            onChange={(e) => setResetEmail(e.target.value)}
                            placeholder="INGRESA TU CORREO"
                            className="neon-input"
                        />
                        <span className="neon-input-border"></span>
                    </div>
                    <button 
                        type="button" 
                        className="neon-reset-button"
                        onClick={handleResetPassword}
                    >
                        ENVIAR CORREO DE RESTABLECIMIENTO
                    </button>
                </div>
            </div>
        </div>
    );
}
inicio-auth.css:
/* Añade estos estilos al final de tu archivo existente */

/* Divider */
.neon-divider {
    display: flex;
    align-items: center;
    margin: 25px 0;
}

.neon-divider-line {
    flex: 1;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(0, 195, 255, 0.5), transparent);
}

.neon-divider-text {
    padding: 0 15px;
    color: #00c3ff;
    text-transform: uppercase;
    font-size: 14px;
    letter-spacing: 2px;
    text-shadow: 0 0 5px rgba(0, 195, 255, 0.5);
}

/* Google Button */
.neon-google-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(5, 5, 30, 0.7);
    border: 1px solid #4285F4;
    margin-top: 0;
}

.neon-google-button:hover {
    background: rgba(66, 133, 244, 0.1);
    box-shadow: 0 0 15px rgba(66, 133, 244, 0.5);
}

.neon-google-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: #4285F4;
    color: white;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    margin-right: 12px;
    font-weight: bold;
    box-shadow: 0 0 5px rgba(66, 133, 244, 0.8);
}

despues hubo estos otros cambios:
inicio-auth.jsx:
import React, { useState } from 'react';
import { 
  getAuth, 
  signInWithEmailAndPassword, 
  sendPasswordResetEmail, 
  GoogleAuthProvider, 
  signInWithPopup 
} from "firebase/auth";
import { useFirebaseApp } from 'reactfire';
import './inicio-auth.css';

export default function InicioAuth() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState(false);
    const [resetSent, setResetSent] = useState(false);
    const [resetEmail, setResetEmail] = useState('');

    const firebase = useFirebaseApp();
    const auth = getAuth(firebase);

    // Inicio sesión normal (CORREO/CONTRASEÑA)
    const handleLogin = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess(false);

        try {
            await signInWithEmailAndPassword(auth, email, password);
            setSuccess(true);
            setTimeout(() => {
                setEmail('');
                setPassword('');
                setSuccess(false);
            }, 3000);
        } catch (error) {
            handleLoginError(error);
        }
    };

    // Inicio sesión con GOOGLE
    const handleLoginWithGoogle = async () => {
        try {
            const provider = new GoogleAuthProvider();
            await signInWithPopup(auth, provider);
            setSuccess(true);
            setTimeout(() => setSuccess(false), 3000);
        } catch (error) {
            setError('Error al iniciar con Google: ' + error.message);
        }
    };

    // Manejo de errores
    const handleLoginError = (error) => {
        console.error("Error de Firebase:", error.code);
        let errorMessage = 'Error al iniciar sesión';
        
        switch (error.code) {
            case 'auth/user-not-found':
                errorMessage = 'Usuario no encontrado';
                break;
            case 'auth/wrong-password':
                errorMessage = 'Correo o contraseña incorrectos';
                break;
            case 'auth/user-disabled':
                errorMessage = 'Tu cuenta ha sido desactivada';
                break;
            case 'auth/too-many-requests':
                errorMessage = 'Demasiados intentos. Intenta más tarde o restablece tu contraseña';
                break;
            case 'auth/invalid-email':
                errorMessage = 'El formato del correo es inválido';
                break;
            default:
                errorMessage = 'Error al iniciar sesión: ' + error.message;
        }
        
        setError(errorMessage);
    };

    // Restablecer contraseña
    const handleResetPassword = async () => {
        if (!resetEmail) {
            setError('Ingresa tu correo electrónico para restablecer la contraseña');
            return;
        }

        try {
            await sendPasswordResetEmail(auth, resetEmail);
            setResetSent(true);
            setError('');
            setTimeout(() => {
                setResetSent(false);
                setResetEmail('');
            }, 5000);
        } catch (error) {
            console.error("Error al enviar correo de restablecimiento:", error);
            setError('Error al enviar el correo: ' + error.message);
            setResetSent(false);
        }
    };

    return (
        <div className="neon-auth-container">
            <div className="neon-card">
                <h2 className="neon-title">INICIAR SESIÓN<span className="neon-flicker">_</span></h2>
                
                {/* Mensajes de error/éxito */}
                {error && <div className="neon-error">{error}</div>}
                {success && <div className="neon-success">¡Inicio de sesión exitoso! Redirigiendo...</div>}
                {resetSent && (
                    <div className="neon-success">
                        ¡Correo de restablecimiento enviado a {resetEmail}! 
                        Revisa tu bandeja de entrada y spam.
                    </div>
                )}

                {/* Formulario tradicional */}
                <form onSubmit={handleLogin}>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            placeholder="CORREO ELECTRÓNICO"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <div className="neon-input-group">
                        <input
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="CONTRASEÑA"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <button type="submit" className="neon-button">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        INGRESAR
                    </button>
                </form>

                {/* Divisor estilizado */}
                <div className="neon-divider">
                    <span className="neon-divider-line"></span>
                    <span className="neon-divider-text">O</span>
                    <span className="neon-divider-line"></span>
                </div>

                {/* Botón Google */}
                <button 
                    onClick={handleLoginWithGoogle} 
                    className="neon-button neon-google-button"
                >
                    <span className="neon-google-icon">G</span>
                    Continuar con Google
                </button>

                {/* Sección "¿Olvidaste tu contraseña?" (ESTILOS COMPLETAMENTE RESTAURADOS) */}
                <div className="neon-reset-container">
                    <h3 className="neon-reset-title">¿Olvidaste tu contraseña?</h3>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={resetEmail}
                            onChange={(e) => setResetEmail(e.target.value)}
                            placeholder="INGRESA TU CORREO"
                            className="neon-input"
                        />
                        <span className="neon-input-border"></span>
                    </div>
                    <button 
                        type="button" 
                        className="neon-reset-button"
                        onClick={handleResetPassword}
                    >
                        ENVIAR CORREO DE RESTABLECIMIENTO
                    </button>
                </div>
            </div>
        </div>
    );
}
inicio-auth.jsx:
/* ESTILOS BASE (EXISTENTES) */
.neon-auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: #0a0a1a;
    background-image: 
        radial-gradient(circle at 10% 20%, rgba(0, 80, 255, 0.15) 0%, transparent 25%),
        radial-gradient(circle at 90% 80%, rgba(0, 200, 255, 0.15) 0%, transparent 25%),
        linear-gradient(to bottom, rgba(0,0,0,0.9), rgba(5,0,30,0.95));
    font-family: 'Rajdhani', 'Segoe UI', sans-serif;
    overflow: hidden;
    position: relative;
}

.neon-card {
    position: relative;
    width: 420px;
    padding: 50px 40px;
    background: rgba(5, 5, 30, 0.7);
    border-radius: 20px;
    box-shadow: 
        0 0 25px rgba(0, 150, 255, 0.5),
        0 0 50px rgba(0, 100, 255, 0.3),
        inset 0 0 15px rgba(0, 200, 255, 0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(0, 200, 255, 0.3);
    z-index: 1;
    overflow: hidden;
    transform-style: preserve-3d;
    animation: cardFloat 6s ease-in-out infinite alternate;
}

.neon-title {
    color: #00f2ff;
    text-align: center;
    margin-bottom: 40px;
    font-size: 2.5rem;
    font-weight: 600;
    letter-spacing: 4px;
    text-shadow: 
        0 0 10px #00c3ff,
        0 0 20px #00c3ff,
        0 0 40px rgba(0, 195, 255, 0.7);
    position: relative;
    animation: textFloat 3s ease-in-out infinite alternate, textPulse 2s infinite alternate;
}

.neon-input-group {
    position: relative;
    margin-bottom: 40px;
    perspective: 500px;
}

.neon-input {
    width: 100%;
    padding: 18px 0;
    font-size: 18px;
    color: #00e1ff;
    background: transparent;
    border: none;
    border-bottom: 2px solid rgba(0, 195, 255, 0.5);
    outline: none;
    letter-spacing: 2px;
    transition: all 0.4s;
    transform-origin: left;
}

.neon-input-border {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, #00f2ff, #0084ff, #00f2ff);
    background-size: 200% 100%;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    z-index: 1;
    animation: borderGradient 3s linear infinite;
}

.neon-button {
    position: relative;
    width: 100%;
    padding: 18px;
    background: rgba(0, 150, 255, 0.1);
    border: none;
    color: #00f2ff;
    font-size: 18px;
    letter-spacing: 3px;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.4s;
    margin-top: 30px;
    border-radius: 8px;
    box-shadow: 
        0 0 15px rgba(0, 195, 255, 0.4),
        inset 0 0 10px rgba(0, 195, 255, 0.2);
    z-index: 1;
    font-weight: 600;
    text-transform: uppercase;
}

.neon-error, .neon-success {
    padding: 18px;
    margin: 25px 0;
    border-radius: 8px;
    text-align: center;
    letter-spacing: 1px;
    font-size: 16px;
    transition: all 0.5s;
    transform-origin: top;
    animation: fadeIn 0.5s ease-out;
}

/* ESTILOS RESTAURADOS PARA "¿OLVIDASTE TU CONTRASEÑA?" */
.neon-reset-container {
    margin-top: 40px;
    padding-top: 30px;
    border-top: 2px solid rgba(0, 195, 255, 0.2);
    position: relative;
    animation: fadeInReset 0.8s both;
}

.neon-reset-title {
    color: rgba(0, 242, 255, 0.8);
    font-size: 18px;
    margin-bottom: 20px;
    text-align: center;
    letter-spacing: 2px;
    text-shadow: 0 0 10px rgba(0, 195, 255, 0.3);
    animation: textFlicker 3s infinite alternate;
}

.neon-reset-button {
    width: 100%;
    padding: 16px;
    background: rgba(0, 150, 255, 0.1);
    border: 1px solid rgba(0, 195, 255, 0.3);
    color: #00f2ff;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.4s;
    margin-top: 20px;
    border-radius: 8px;
    letter-spacing: 2px;
    text-transform: uppercase;
    position: relative;
    overflow: hidden;
    z-index: 1;
    box-shadow: 
        0 0 15px rgba(0, 195, 255, 0.3),
        inset 0 0 10px rgba(0, 195, 255, 0.2);
}

/* ESTILOS NUEVOS PARA GOOGLE */
.neon-divider {
    display: flex;
    align-items: center;
    margin: 25px 0;
}

.neon-divider-line {
    flex: 1;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(0, 195, 255, 0.5), transparent);
}

.neon-divider-text {
    padding: 0 15px;
    color: #00c3ff;
    text-transform: uppercase;
    font-size: 14px;
    letter-spacing: 2px;
    text-shadow: 0 0 5px rgba(0, 195, 255, 0.5);
}

.neon-google-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(5, 5, 30, 0.7);
    border: 1px solid #4285F4;
    margin-top: 0;
}

.neon-google-button:hover {
    background: rgba(66, 133, 244, 0.1);
    box-shadow: 0 0 15px rgba(66, 133, 244, 0.5);
}

.neon-google-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: #4285F4;
    color: white;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    margin-right: 12px;
    font-weight: bold;
    box-shadow: 0 0 5px rgba(66, 133, 244, 0.8);
}

/* ANIMACIONES (TODAS RESTAURADAS) */
@keyframes cardFloat {
    0% { transform: translateY(0) rotateX(0.5deg) rotateY(0.5deg); }
    100% { transform: translateY(-20px) rotateX(-0.5deg) rotateY(0.5deg); }
}

@keyframes textPulse {
    0%, 100% { text-shadow: 0 0 10px #00c3ff, 0 0 20px #00c3ff, 0 0 40px rgba(0, 195, 255, 0.7); }
    50% { text-shadow: 0 0 15px #00c3ff, 0 0 30px #00c3ff, 0 0 60px rgba(0, 195, 255, 0.9); }
}

@keyframes fadeInReset {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes textFlicker {
    0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
        opacity: 0.8;
        text-shadow: 0 0 10px rgba(0, 195, 255, 0.5);
    }
    20%, 24%, 55% {
        opacity: 0.4;
        text-shadow: none;
    }
}

despues hubo estos otros cambios:
inicio-auth.jsx:
import React, { useState } from 'react';
import { 
  getAuth, 
  signInWithEmailAndPassword, 
  sendPasswordResetEmail, 
  GoogleAuthProvider,
  GithubAuthProvider,
  signInWithPopup 
} from "firebase/auth";
import { useFirebaseApp } from 'reactfire';
import './inicio-auth.css';

export default function InicioAuth() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState(false);
    const [resetSent, setResetSent] = useState(false);
    const [resetEmail, setResetEmail] = useState('');

    const firebase = useFirebaseApp();
    const auth = getAuth(firebase);

    // 1. Login con Email/Contraseña (Original)
    const handleLogin = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess(false);

        try {
            await signInWithEmailAndPassword(auth, email, password);
            setSuccess(true);
            setTimeout(() => {
                setEmail('');
                setPassword('');
                setSuccess(false);
            }, 3000);
        } catch (error) {
            handleLoginError(error);
        }
    };

    // 2. Login con Google (Previo)
    const handleLoginWithGoogle = async () => {
        try {
            const provider = new GoogleAuthProvider();
            await signInWithPopup(auth, provider);
            setSuccess(true);
            setTimeout(() => setSuccess(false), 3000);
        } catch (error) {
            setError('Error al iniciar con Google: ' + error.message);
        }
    };

    // 3. Nuevo: Login con GitHub
    const handleLoginWithGitHub = async () => {
        try {
            const provider = new GithubAuthProvider();
            provider.addScope('user:email'); // Para obtener el email
            const result = await signInWithPopup(auth, provider);
            console.log("Usuario GitHub:", result.user);
            setSuccess(true);
            setTimeout(() => setSuccess(false), 3000);
        } catch (error) {
            console.error("Error GitHub Auth:", error);
            setError('Error al iniciar con GitHub: ' + error.message);
        }
    };

    // Resto del código (manejo de errores, reset password)...
    const handleLoginError = (error) => {
        console.error("Error de Firebase:", error.code);
        let errorMessage = 'Error al iniciar sesión';
        
        switch (error.code) {
            case 'auth/user-not-found':
                errorMessage = 'Usuario no encontrado';
                break;
            case 'auth/wrong-password':
                errorMessage = 'Correo o contraseña incorrectos';
                break;
            case 'auth/user-disabled':
                errorMessage = 'Tu cuenta ha sido desactivada';
                break;
            case 'auth/too-many-requests':
                errorMessage = 'Demasiados intentos. Intenta más tarde o restablece tu contraseña';
                break;
            case 'auth/invalid-email':
                errorMessage = 'El formato del correo es inválido';
                break;
            default:
                errorMessage = 'Error al iniciar sesión: ' + error.message;
        }
        
        setError(errorMessage);
    };

    const handleResetPassword = async () => {
        if (!resetEmail) {
            setError('Ingresa tu correo electrónico para restablecer la contraseña');
            return;
        }

        try {
            await sendPasswordResetEmail(auth, resetEmail);
            setResetSent(true);
            setError('');
            setTimeout(() => {
                setResetSent(false);
                setResetEmail('');
            }, 5000);
        } catch (error) {
            console.error("Error al enviar correo de restablecimiento:", error);
            setError('Error al enviar el correo: ' + error.message);
            setResetSent(false);
        }
    };

    return (
        <div className="neon-auth-container">
            <div className="neon-card">
                <h2 className="neon-title">INICIAR SESIÓN<span className="neon-flicker">_</span></h2>
                
                {error && <div className="neon-error">{error}</div>}
                {success && <div className="neon-success">¡Inicio de sesión exitoso! Redirigiendo...</div>}
                {resetSent && (
                    <div className="neon-success">
                        ¡Correo de restablecimiento enviado a {resetEmail}! 
                        Revisa tu bandeja de entrada y spam.
                    </div>
                )}

                {/* Formulario tradicional */}
                <form onSubmit={handleLogin}>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            placeholder="CORREO ELECTRÓNICO"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <div className="neon-input-group">
                        <input
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="CONTRASEÑA"
                            className="neon-input"
                            required
                        />
                        <span className="neon-input-border"></span>
                    </div>

                    <button type="submit" className="neon-button">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        INGRESAR
                    </button>
                </form>

                {/* Divisor */}
                <div className="neon-divider">
                    <span className="neon-divider-line"></span>
                    <span className="neon-divider-text">O</span>
                    <span className="neon-divider-line"></span>
                </div>

                {/* Proveedores OAuth */}
                <div className="oauth-buttons-container">
                    <button onClick={handleLoginWithGoogle} className="neon-button neon-google-button">
                        <span className="neon-google-icon">G</span>
                        Continuar con Google
                    </button>

                    <button onClick={handleLoginWithGitHub} className="neon-button neon-github-button">
                        <span className="neon-github-icon">
                            <svg aria-hidden="true" height="20" viewBox="0 0 16 16" width="20">
                                <path fill="white" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path>
                            </svg>
                        </span>
                        Continuar con GitHub
                    </button>
                </div>

                {/* Restablecer contraseña */}
                <div className="neon-reset-container">
                    <h3 className="neon-reset-title">¿Olvidaste tu contraseña?</h3>
                    <div className="neon-input-group">
                        <input
                            type="email"
                            value={resetEmail}
                            onChange={(e) => setResetEmail(e.target.value)}
                            placeholder="INGRESA TU CORREO"
                            className="neon-input"
                        />
                        <span className="neon-input-border"></span>
                    </div>
                    <button 
                        type="button" 
                        className="neon-reset-button"
                        onClick={handleResetPassword}
                    >
                        ENVIAR CORREO DE RESTABLECIMIENTO
                    </button>
                </div>
            </div>
        </div>
    );
}

inicio-auth.css:
/* Estilos base existentes... */

/* Nuevos estilos para GitHub */
.oauth-buttons-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin: 20px 0;
}

.neon-github-button {
    background: rgba(5, 5, 30, 0.7);
    border: 1px solid #333;
    display: flex;
    align-items: center;
    justify-content: center;
}

.neon-github-button:hover {
    background: rgba(36, 41, 46, 0.1);
    box-shadow: 0 0 15px rgba(36, 41, 46, 0.5);
}

.neon-github-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: #333;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    margin-right: 12px;
    padding: 2px;
}

.neon-github-icon svg {
    filter: drop-shadow(0 0 2px rgba(255, 255, 255, 0.7));
}

/* Estilos existentes para Google (conservados) */
.neon-google-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(5, 5, 30, 0.7);
    border: 1px solid #4285F4;
}

.neon-google-button:hover {
    background: rgba(66, 133, 244, 0.1);
    box-shadow: 0 0 15px rgba(66, 133, 244, 0.5);
}

.neon-google-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: #4285F4;
    color: white;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    margin-right: 12px;
    font-weight: bold;
    box-shadow: 0 0 5px rgba(66, 133, 244, 0.8);
}

/* Divisor */
.neon-divider {
    display: flex;
    align-items: center;
    margin: 25px 0;
}

.neon-divider-line {
    flex: 1;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(0, 195, 255, 0.5), transparent);
}

.neon-divider-text {
    padding: 0 15px;
    color: #00c3ff;
    text-transform: uppercase;
    font-size: 14px;
    letter-spacing: 2px;
    text-shadow: 0 0 5px rgba(0, 195, 255, 0.5);
}

/* Estilos restaurados para recuperación */
.neon-reset-container {
    margin-top: 40px;
    padding-top: 30px;
    border-top: 2px solid rgba(0, 195, 255, 0.2);
    position: relative;
    animation: fadeInReset 0.8s both;
}

.neon-reset-title {
    color: rgba(0, 242, 255, 0.8);
    font-size: 18px;
    margin-bottom: 20px;
    text-align: center;
    letter-spacing: 2px;
    text-shadow: 0 0 10px rgba(0, 195, 255, 0.3);
    animation: textFlicker 3s infinite alternate;
}

.neon-reset-button {
    width: 100%;
    padding: 16px;
    background: rgba(0, 150, 255, 0.1);
    border: 1px solid rgba(0, 195, 255, 0.3);
    color: #00f2ff;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.4s;
    margin-top: 20px;
    border-radius: 8px;
    letter-spacing: 2px;
    text-transform: uppercase;
    position: relative;
    overflow: hidden;
    z-index: 1;
    box-shadow: 
        0 0 15px rgba(0, 195, 255, 0.3),
        inset 0 0 10px rgba(0, 195, 255, 0.2);
}

/* Animaciones */
@keyframes fadeInReset {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes textFlicker {
    0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
        opacity: 0.8;
        text-shadow: 0 0 10px rgba(0, 195, 255, 0.5);
    }
    20%, 24%, 55% {
        opacity: 0.4;
        text-shadow: none;
    }
}

le quiero añadir lo siguiente:
bueno lo que quiero es lo siguiente:
quiero adaptar los siguientes codigos:
Boton.js:
// src/componentes/Boton.js
import React from 'react';
import './Boton.css';

const Boton = ({ contador, setContador }) => {
  const handleClick = () => {
    console.log('Contador antes de incrementar:', contador);
    setContador(contador + 1);
    console.log('Contador después de incrementar:', contador + 1);
  };

  return (
    <button 
      className="boton" 
      onClick={handleClick}
    >
      Haz clic aquí ({contador} clics)
    </button>
  );
};

export default Boton;

BotonAD.js:
// src/componentes/BotonAD.js
import React from 'react';
import './BotonAD.css';

const BotonAD = ({ textoBoton, toggleSeccion, mostrarContador }) => {
  return (
    <button 
      className={`boton-ad ${mostrarContador ? 'contador-activo' : 'formulario-activo'}`}
      onClick={toggleSeccion}
    >
      {textoBoton}
    </button>
  );
};

export default BotonAD;

BotonSubmit.js:
// src/componentes/BotonSubmit.js
import React from 'react';
import './BotonSubmit.css';

const BotonSubmit = ({ onClick, disabled }) => {
    return (
      <button 
        className={`boton-submit ${disabled ? 'deshabilitado' : ''}`}
        onClick={disabled ? () => {} : onClick}
        disabled={disabled}
      >
        Submit
      </button>
    );
  };
export default BotonSubmit;

Formularioprac.js:
// src/componentes/Formularioprac.js
import React, { useState } from 'react';
import './Formularioprac.css';
import Input from './Input';
import BotonSubmit from './BotonSubmit';

const Formularioprac = ({ 
  nombre, 
  setNombre, 
  apellido, 
  setApellido, 
  agregarPersona,
  personas // Recibir prop
}) => {
  const [error, setError] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!nombre.trim() || !apellido.trim()) {
      setError(true);
      return;
    }

    agregarPersona({
      nombre: nombre.trim(),
      apellido: apellido.trim()
    });
    
    setNombre('');
    setApellido('');
    setError(false);
  };

  return (
    <div className="formulario-container">
      <h2 className="formulario-titulo">Ejercicio 2 - Formulario</h2>
      
      {/* Lista de registros */}
      <div className="lista-registros">
        <h3 className="titulo-registros">Registros Guardados</h3>
        {personas.map((persona, index) => (
          <div key={index} className="item-registro">
            <span className="numero-registro">{index + 1}.</span>
            {persona.nombre} {persona.apellido}
          </div>
        ))}
      </div>

      <form onSubmit={handleSubmit}>
        <Input
          label="Nombre"
          value={nombre}
          onChange={(e) => setNombre(e.target.value)}
          placeholder="Ej: Juan"
          required
        />
        
        <Input
          label="Apellido"
          value={apellido}
          onChange={(e) => setApellido(e.target.value)}
          placeholder="Ej: Pérez"
          required
        />

        {error && <p className="mensaje-error">¡Ambos campos son obligatorios!</p>}
        
        <BotonSubmit onClick={handleSubmit} />
      </form>
    </div>
  );
};

export default Formularioprac;

Input.js:
// src/componentes/Input.js
import React from 'react';
import './Input.css';

const Input = ({ label, value, onChange, placeholder, disabled }) => {
  return (
    <div className="input-container">
      <label className="label">{label}</label>
      <input
        className="input"
        type="text"
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        disabled={disabled}
      />
    </div>
  );
};

export default Input;

RandomPokemon.js:
import React, { useState, useEffect } from 'react';
import './RandomPokemon1.css';
import supabase from './BaseDeDatos';

const RandomPokemon = ({ usuarioAutenticado }) => {
  const [pokemon, setPokemon] = useState(null);
  const [loading, setLoading] = useState(false);
  const [isLiked, setIsLiked] = useState(false);
  const [favoritos, setFavoritos] = useState([]);
  const [loadingFavoritos, setLoadingFavoritos] = useState(false);

  const fetchFavoritos = async () => {
    if (!usuarioAutenticado?.id_usuario) {
      setFavoritos([]);
      return;
    }

    setLoadingFavoritos(true);
    try {
      const { data, error } = await supabase
        .from('pokemon_favoritos')
        .select('*')
        .eq('id_usuario', usuarioAutenticado.id_usuario);

      if (error) throw error;
      setFavoritos(data || []);
    } catch (error) {
      console.error('Error al obtener favoritos:', error);
    } finally {
      setLoadingFavoritos(false);
    }
  };

  useEffect(() => {
    fetchFavoritos();
  }, [usuarioAutenticado?.id_usuario]);

  const handleLikeClick = async () => {
    if (!usuarioAutenticado || !pokemon) return;

    try {
      if (!isLiked) {
        const { error } = await supabase
          .from('pokemon_favoritos')
          .insert({
            pokemon_name: pokemon.name,
            pokemon_image: pokemon.image,
            pokemon_abilities: pokemon.abilities,
            pokemon_type: pokemon.types,
            pokemon_height: pokemon.height,
            pokemon_weight: pokemon.weight,
            id_usuario: usuarioAutenticado.id_usuario
          });

        if (error) throw error;
      } else {
        const { error } = await supabase
          .from('pokemon_favoritos')
          .delete()
          .eq('id_usuario', usuarioAutenticado.id_usuario)
          .eq('pokemon_name', pokemon.name);

        if (error) throw error;
      }

      setIsLiked(!isLiked);
      await fetchFavoritos();
    } catch (error) {
      console.error('Error al actualizar favoritos:', error);
    }
  };

  const fetchRandomPokemon = async () => {
    setLoading(true);
    setIsLiked(false);
    const randomId = Math.floor(Math.random() * 898) + 1;
    try {
      const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${randomId}`);
      const data = await response.json();

      const pokemonData = {
        name: data.name,
        image: data.sprites.front_default,
        abilities: data.abilities.map((ability) => ability.ability.name).join(', '),
        types: data.types.map((type) => type.type.name).join(', '),
        weight: data.weight / 10,
        height: data.height / 10,
      };

      setPokemon(pokemonData);

      if (usuarioAutenticado) {
        const isFavorito = favoritos.some(fav => fav.pokemon_name === pokemonData.name);
        setIsLiked(isFavorito);
      }
    } catch (error) {
      console.error('Error fetching the Pokémon:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRandomPokemon();
  }, [usuarioAutenticado]);

  return (
    <div className="container-random-pokemon">
      <h3>Pokémon Aleatorio</h3>
      <button onClick={fetchRandomPokemon} disabled={loading}>
        {loading ? 'Cargando...' : 'Obtener Nuevo Pokemon'}
      </button>
      {pokemon && (
        <div className="random-pokemon-info">
          <h4>{pokemon.name}</h4>
          <img src={pokemon.image} alt={pokemon.name} />
          <p><strong>Habilidades:</strong> {pokemon.abilities}</p>
          <p><strong>Tipos:</strong> {pokemon.types}</p>
          <p><strong>Altura:</strong> {pokemon.height} decimetros</p>
          <p><strong>Peso:</strong> {pokemon.weight} hectogramos</p>

          {usuarioAutenticado && (
            <div>
              <button
                className={`heart-btn ${isLiked ? 'liked' : ''}`}
                onClick={handleLikeClick}
              >
                <span className="heart"></span>
              </button>
              <h3>Lista de tus favoritos</h3>
              {loadingFavoritos ? (
                <p>Cargando favoritos...</p>
              ) : favoritos.length === 0 ? (
                <p>No tienes pokémones favoritos aún</p>
              ) : (
                <div className="favoritos-grid">
                  {favoritos.map((fav) => (
                    <div key={fav.id_like} className="pokemon-favorito">
                      <img src={fav.pokemon_image} alt={fav.pokemon_name} />
                      <h4>{fav.pokemon_name}</h4>
                      <p>Tipo: {fav.pokemon_type}</p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default RandomPokemon;

este App.js es de otro proyecto:
import React, { useEffect } from 'react';
import FormularioEntrar from './componentes/FormularioEntrar';
import RandomPokemon from './componentes/RandomPokemon';
import Formulario from './componentes/Formulario';
import Formularioprac from './componentes/Formularioprac'; // Usar Formularioprac como Practica
import Boton from './componentes/Boton'; // Importar el componente Boton

function App() {
  const [usuarioAutenticado, setUsuarioAutenticado] = React.useState(null);
  const [seccionActual, setSeccionActual] = React.useState('');
  const [nombre, setNombre] = React.useState('');
  const [apellido, setApellido] = React.useState('');
  const [personas, setPersonas] = React.useState([]);
  const [contador, setContador] = React.useState(0); // Estado para el contador

  const handleLogin = (userData) => {
    setUsuarioAutenticado(userData);
  };

  const handleLogout = () => {
    setUsuarioAutenticado(null);
  };

  const handleMenuClick = (seccion) => {
    setSeccionActual(seccion);
  };

  const agregarPersona = (persona) => {
    setPersonas([...personas, persona]);
  };

  useEffect(() => {
    console.log('Contador actualizado:', contador);
  }, [contador]);

  return (
    <div className="App">
      {usuarioAutenticado ? (
        <div>
          <div className="menu-container">
            <button 
              className={`menu-item ${seccionActual === 'contador' ? 'seleccionado' : ''}`} 
              onClick={() => handleMenuClick('contador')}
            >
              Contador
            </button>
            <button 
              className={`menu-item ${seccionActual === 'practica' ? 'seleccionado' : ''}`} 
              onClick={() => handleMenuClick('practica')}
            >
              Formulario
            </button>
            <button 
              className={`menu-item ${seccionActual === 'pokemon' ? 'seleccionado' : ''}`} 
              onClick={() => handleMenuClick('pokemon')}
            >
              Pokémon Desk
            </button>
            <button className="menu-item" onClick={handleLogout}>
              Cerrar sesión
            </button>
          </div>

          {seccionActual === 'contador' && (
            <div>
              <h1>Contador: {contador}</h1>
              <Boton contador={contador} setContador={setContador} />
            </div>
          )}
          {seccionActual === 'practica' && (
            <Formularioprac
              nombre={nombre}
              setNombre={setNombre}
              apellido={apellido}
              setApellido={setApellido}
              agregarPersona={agregarPersona}
              personas={personas}
            />
          )}
          {seccionActual === 'pokemon' && (
            <RandomPokemon usuarioAutenticado={usuarioAutenticado} />
          )}
        </div>
      ) : (
        <FormularioEntrar
          onLogin={handleLogin}
          onLogout={handleLogout}
          usuarioAutenticado={usuarioAutenticado}
        />
      )}
      {!usuarioAutenticado && <Formulario />}
    </div>
  );
}

export default App;

bueno estos codigos que le vas a adaptar pertenecian a uno que tengo conectado a supabase, quiero que estos que te pongo los adaptes pero para este de firebase que tengo, quiero que al momento de iniciar sesion con cualquier usuario lo mande a estos codigos ya modificados, ojo quiero que les crees un css con el estilo que estoy usando para este de neon y ojo vas a modificar todos para que se adapten, tambien el App.js de este lo modificaras al que tengo, tambien como pide una base de datos no relacional yo tengo una relacional quiero que me crees la base de datos no relacional esta es la base de datos que tengo:
create table Usuario(
  id_usuario BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  nombre varchar(20),
  apellidos varchar(50),
  password varchar(10),
  correo varchar(50)
);

CREATE TABLE pokemon_favoritos (
  id_like BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  pokemon_name VARCHAR(50),
  pokemon_image TEXT,
  pokemon_abilities VARCHAR(100),
  pokemon_type VARCHAR(100),
  pokemon_height VARCHAR(100),
  pokemon_weight VARCHAR(100),
  id_usuario INTEGER REFERENCES usuario(id_usuario) ON DELETE CASCADE
);

CREATE POLICY "allow_select_for_users"
ON "public"."usuario"
FOR SELECT
TO public
USING (
  true
);

CREATE POLICY "Permitir inserción de nuevos usuarios"
ON "public"."usuario"
FOR INSERT
TO anon, authenticated
WITH CHECK (
  true
);

CREATE POLICY "Permitir lectura pública de usuarios"
ON "public"."usuario"
FOR SELECT
TO public
USING (
  true
);

ALTER POLICY "allow_select_for_users"
ON "public"."usuario"
TO public
USING (
  true
);

ALTER POLICY "Permitir inserción de nuevos usuarios"
ON "public"."usuario"
TO anon, authenticated
WITH CHECK (
  true
);

ALTER POLICY "Permitir lectura pública de usuarios"
ON "public"."usuario"
TO public
USING (
  true
);

select * from usuario

INSERT INTO usuario (nombre, apellidos, password, correo)
VALUES ('Juan', 'Pérez', 'clave123', 'juan.perez@example.com');

quiero que todo esto lo adaptes a firebase

ahora se ve asi mis archivos:
src:
|
|	componentes:
|	|
|	|autenticacion.css
|	|autenticacion.jsx
|	|Boton.css
|	|Contador.js
|	|BotonAD.css
|	|BotonAD.js
|	|BotonSubmit.css
|	|BotonSubmit.js
|	|firebase-config.js
|	|Formularioprac.css
|	|Formularioprac.js
|	|inicio-auth.css
|	|inicio-auth.jsx
|	|Input.css
|	|Input.js
|	|menu.css
|	|menu.jsx
|	|RandomPokemon.js
|	|RandomPokemon1.css
|
|App.css
|App.js

estos que te puse son de una que tenia pero ojo no quiero que consideres el de basededatos.js

quiero que juntes los codigo de Boton, Contador, BotonAD, BotonSubmit, Formlarioprac, Input, menú, RandomPokemon. Con los otros códigos ya que los tengo conectados con supabase y los otros están en firebase, quiero que todos sean para firebase asi que júntalos, a y ojo el de menú quiero que lo juntes ambos sin modificarle tanto y que sea para firebase